package com.shopme.admin.user;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase.Replace;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;
import org.springframework.test.annotation.Rollback;

import com.shopme.common.entity.Role;
import com.shopme.common.entity.User;

@DataJpaTest
@AutoConfigureTestDatabase(replace = Replace.NONE) 
@Rollback(false)
public class UserRepositoryTests {
	@Autowired
	private UserRepository repo;
	
	@Autowired
	private TestEntityManager entityManager;
	
	@Test
	public void testCreateUser() {
		Role adminRole = entityManager.find(Role.class,1);
		User user = new User("binhp8699@gmail.com", "123q", "Binh", "Phan Quoc Binh");
		user.addRole(adminRole);
		User savedUser = repo.save(user);
		assertThat(savedUser.getId()).isGreaterThan(0);
	}
	
	@Test
	public void testCreateUserWithTwoRoles() {
		User userRavi = new User("ravi@gmail.com","ravi2020", "Ravi", "Kumar");
		Role editorRole = new Role(3);
		Role assistantRole = new Role(5);
		userRavi.addRole(editorRole);
		userRavi.addRole(assistantRole);
		User savedUser = repo.save(userRavi);
		assertThat(savedUser.getId()).isGreaterThan(0);
		
	}
	
	@Test
	public void testListAllUsers() {
		Iterable<User> listUsers = repo.findAll();
		listUsers.forEach(user -> System.out.println(user));
	}
	
	@Test
	public void testGetUserById() {
		User user = repo.findById(1).get();
		System.out.println(user);
		assertThat(user).isNotNull();
	}
	
	@Test
	public void updateUserDetails() {
		User user = repo.findById(1).get();
		user.setEnabled(true);
		user.setEmail("binhp8699@outlook.com");
		
		repo.save(user);
	}
	
	@Test
	public void updateUserRoles() {
		User userRavi = repo.findById(2).get();
		Role roleEditor = new Role(3);
		Role roleSaleperson = new Role(2);
		userRavi.getRoles().remove(roleEditor);
		userRavi.addRole(roleSaleperson);
		
		repo.save(userRavi);
	}
	
	@Test 
	public void deleteUser() {
		repo.deleteById(2);
	}

}
